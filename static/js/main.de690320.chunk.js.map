{"version":3,"sources":["Forecast1Day.js","App.js","serviceWorker.js","index.js"],"names":["Forecast1Day","className","this","props","weekDay","src","icon","temperature","description","Component","App","state","days","fetch","then","res","json","setState","weekdays","map","oneDay","day","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAGqBA,G,6LAWb,OACI,yBAAKC,UAAU,gBACvB,4BAAgBC,KAAKC,MAAMC,SACf,yBAAKC,IAAKH,KAAKC,MAAMG,OACrB,6BAAK,2BAAIJ,KAAKC,MAAMI,aAAiBL,KAAKC,MAAMK,kB,GAftBC,cCqD3BC,E,YA1CX,WAAYP,GAAO,IAAD,8BACd,4CAAMA,KACDQ,MAAQ,CACTC,KAAM,IAHI,E,iFAOE,IAAD,OACfC,MAAM,yEACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAF,GACF,EAAKK,SAAS,CAACL,c,+BAKvB,IAAMM,EAAW,CACb,SAAU,UAAW,UAAW,YAChC,WAAY,SAAU,YAG1B,OACI,yBAAKjB,UAAU,OAGXC,KAAKS,MAAMC,KAAKO,KAAI,SAAAC,GAChB,OACI,kBAAC,EAAD,CACJhB,QAAWc,EAASE,EAAOC,KAC3Bf,KAAI,uHAAoHc,EAAOd,KAA3H,QACJC,YAAea,EAAOb,YAAc,OACpCC,YAAeY,EAAOZ,sB,GAhCxBc,IAAMb,WCDJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.de690320.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Forecast1Day.css';\r\n\r\nexport default class Forecast1Day extends Component {\r\n\r\n/**\r\n * \"day\": 2,\r\n\"temperature\": 31.6,\r\n\"icon\": \"1\",\r\n\"description\": \"Sunny\"\r\n**/\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Forecast1Day\">\r\n    <           h5>{this.props.weekDay}</h5>\r\n                <img src={this.props.icon}></img>\r\n                <div><i>{this.props.temperature}</i>{this.props.description}</div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Forecast1Day from './Forecast1Day';\n\n\n/**\n * \"day\": 2,\n\"temperature\": 31.6,\n\"icon\": \"1\",\n\"description\": \"Sunny\"\n**/\n\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            days: []\n        };\n    }\n\n    componentDidMount(){\n        fetch(\"https://my-json-server.typicode.com/evyros/react-weather-app/forecast\")\n            .then(res => res.json())\n            .then(days => {\n                this.setState({days});\n            });\n    }\n    \n    render() {\n        const weekdays = [\n            'Sunday', 'Monday ', 'Tuesday', 'Wednesday', \n            'Thursday', 'Friday', 'Saturday'\n        ];\n\n        return (\n            <div className=\"App\">\n\n                {\n                this.state.days.map(oneDay =>{\n                    return (\n                        <Forecast1Day\n                    weekDay = {weekdays[oneDay.day]}\n                    icon = {`https://raw.githubusercontent.com/TierK/react-weather-app/f7a387d768773b7c2221bf06352fdea786f87608/src/icons/${oneDay.icon}.png`}\n                    temperature = {oneDay.temperature + 'Â°'}\n                    description = {oneDay.description}\n                />\n                    );\n                })\n                \n            }</div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}